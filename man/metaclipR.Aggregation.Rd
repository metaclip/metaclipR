% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/metaclipR.Aggregation.R
\name{metaclipR.Aggregation}
\alias{metaclipR.Aggregation}
\title{Directed metadata graph construction for Transformations of DatasetSubsets}
\usage{
metaclipR.Aggregation(package = "transformeR",
  version = as.character(packageVersion(package)), graph,
  fun = "aggregateGrid", arg.list = NULL, use.arg.list = TRUE)
}
\arguments{
\item{package}{package}

\item{version}{version}

\item{graph}{A previous metaclipR data structure from which the current step follows}

\item{fun}{function name. Unused (set to \code{"aggregateGrid"})}

\item{arg.list}{Either a character string containing a literal command call or a key-value pair list of arguments-values. See the dedicated section more for details.}

\item{use.arg.list}{Logical flag. Used to optionally omit (\code{use.arg.list = FALSE}) the argument list in the description of command call. 
Default to TRUE.}
}
\value{
A named list with the updated graph in element \code{"graph"} and the parent node name (\code{"parentnodename"}),
needed for linking subsequent operations.
}
\description{
Build a directed metadata graph describing a Transformation on a 
climate4R grid that is a subset of Dataset.
}
\details{
This function takes as reference the semantics defined in the Data Source and Transformation ontology
defined in the Metaclip Framework (\url{http://www.metaclip.org}).
}
\section{About argument lists}{

Argument lists are key-value list in which the different arguments and their valus are passed 
to the command description. These were initially conceived as an adequate means of describing
command calls to interpreted languajes (R, python...) using both the Argument and Argument 
classes from the datasource vocabulary of METACLIP.

Alternatively, and in order to accomodate the description of the source code to other environments
and languajes (e.g. shell scripts, calls to CDOs etc.), the use of literal command calls 
is a more convenient choice. Literal command calls also allow for a more straightforward
reproducibility by just "copying and pasting" the code used to generate each step. Literal
command calls are encoded in METACLIP using the \emph{hadLiteralCommandCall} data property
from the datasource vocabulary, that is attached to the command description. 
To apply this second alternative, the \code{arg.list} argument is specified as a character string
containing the command call.

Note that default argument values are often omitted from comand calls. However, the default behaviour of 
commands may change depending on the specific software version, and it is therefore often advisable to 
explicitly include the default argument values for a more straightforward interpretation of the source code
by the user.
}

\examples{
\dontrun{
require(transformeR)
require(igraph)
pkg <- "transformeR"
v <- "1.1.1"
# Assume a given hindcast DatasetSubset (we first simplify a)
data("CFS_Iberia_hus850")
DS <- subsetGrid(CFS_Iberia_hus850, members = 1:3, years = 1989:1991)
graph <- metaclipR.DatasetSubset(package = pkg,
                                 version = v,
                                 arg.list = list(members = 1:3,
                                                 years = 1989:1991),
                                 fun = "subsetGrid",
                                 output = "DS")
# An aggregation is performed on the example data. In this case, 
# The forecast is aggregated by members (ensemble mean), and in space
# (along longitude and latitude) to obtain a spatial mean. Original data is daily,
# and an annual aggregation is performed, considering the monthly means and the
# annual maxima:
fun <- "aggregateGrid"
arg.list <- list("aggr.mem" = list(FUN = "mean", na.rm = TRUE),
                 "aggr.d" = list(FUN = NULL),
                 "aggr.m" = list(FUN = "mean", na.rm = TRUE),
                 "aggr.y" = list(FUN = "max", na.rm = TRUE),
                 "aggr.lat" = list(FUN = "mean", na.rm = TRUE),
                 "aggr.lon" = list(FUN = "mean", na.rm = TRUE),
                 "weight.by.lat" = TRUE)
# The aggregation is undertaken with transformeR::subsetGrid:
arg.list[["grid"]] <- DS
out <- do.call(fun, arg.list)
# This is how metadata is encoded:
# 1.) We identify the origin node from which the first transformation hangs:
graph$parentnodename
# 2.) metaclipR.Aggregation is called:
graph <- metaclipR.Aggregation(package = pkg,
                               version = v,
                               graph = graph,
                               fun = fun,
                               arg.list = arg.list)
# And this is the metadata description stored in the igraph-class object:
plot(graph$graph)
}
}
\references{
\href{http://www.meteo.unican.es/en/climate4r}{Climate4R page at University of Cantabria}
}
\seealso{
Other transformation: \code{\link{metaclip.graph.Command}},
  \code{\link{metaclipR.AnomalyCalculation}},
  \code{\link{metaclipR.Climatology}},
  \code{\link{metaclipR.Dataset}},
  \code{\link{metaclipR.Ensemble}},
  \code{\link{metaclipR.Interpolation}},
  \code{\link{metaclipR.etccdi}}
}
\author{
D. San MartÃ­n, J. Bedia
}
\concept{transformation}
