% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/metaclipR.DatasetSubset.R
\name{metaclipR.DatasetSubset}
\alias{metaclipR.DatasetSubset}
\title{Directed metadata graph construction for DatasetSubsets}
\usage{
metaclipR.DatasetSubset(package = "transformeR",
  version = as.character(packageVersion(package)), graph = NULL,
  fun = NULL, arg.list = NULL, output = NULL,
  RefSpatialExtent = NULL, xmin = NULL, xmax = NULL, ymin = NULL,
  ymax = NULL, proj = NULL, resX = NULL, resY = NULL,
  disable.command = FALSE)
}
\arguments{
\item{package}{package}

\item{version}{version}

\item{graph}{A previously initialized metaclipR output list ($graph + $parentnodename). Default to \code{NULL}, which starts a new empty graph}

\item{fun}{function name (default, and only value accepted is \code{"subsetGrid"})}

\item{arg.list}{Either a character string containing a literal command call or a key-value pair list of arguments-values. See the dedicated section more for details.}

\item{output}{A climate4R grid, resulting from the application of \code{\link[transformeR]{subsetGrid}}.}

\item{RefSpatialExtent}{A reference spatial extent used for spatial subset definition.
The reference spatial extent can be initiated with \code{\link{metaclipR.SpatialExtent}}, to be used in subsequent operations 
(e.g., regridding ...)}

\item{xmin}{Optional. When neither \code{obj}, nor \code{RefSpatialExtent} arguments are passed, this is the minimum
x coordinate defining the spatial extent}

\item{xmax}{Same as \code{xmin}, but the maximum}

\item{ymin}{Same as \code{xmin}, but for the Y coordinates}

\item{ymax}{Same as \code{ymin}, but for the maximum Y coordinate.}

\item{proj}{A projection string}

\item{resX}{Spatial reslution of the grid in the X-coordinates}

\item{resY}{Same as \code{resX}, but for the Y-coordinates}

\item{disable.command}{Better not to touch. For internal usage only (used to re-use most of the code in other functions, but skipping command tracking)}
}
\value{
A named list with the updated graph in element \code{"graph"} and the parent node name,
sometimes needed for linking subsequent operations.
}
\description{
Build a directed metadata graph from climate4R grids that are subsets of Datasets
}
\details{
This function takes as reference the semantics defined in the Data Source and Transformation ontology
defined in the Metaclip Framework (\url{http://www.metaclip.org/}).
}
\section{About argument lists}{

Argument lists are key-value list in which the different arguments and their valus are passed 
to the command description. These were initially conceived as an adequate means of describing
command calls to interpreted languajes (R, python...) using both the Argument and Argument 
classes from the datasource vocabulary of METACLIP.

Alternatively, and in order to accomodate the description of the source code to other environments
and languajes (e.g. shell scripts, calls to CDOs etc.), the use of literal command calls 
seems like a more convenient choice. Literal command calls also allow for a more straightforward
reproducibility by just "copying and pasting" the code used to generate each step. Literal
command calls are encoded in METACLIP using the \emph{hadLiteralCommandCall} data property
from the datasource vocabulary, that is attached to the command description. 
To apply this second alternative, the \code{arg.list} argument is specified as a character string
containing the command call.

Note that default argument values are often omitted from comand calls. However, the default behaviour of 
commands may change depending on the specific software version, and it is therefore often advisable to 
explicitly include the default argument values for a more straightforward interpretation of the source code
by the user.
}

\examples{
\dontrun{
data(S4_tas_iberia)
require(transformeR)
require(igraph)
# An example subset from S4_tas_iberia
arg.list <- list() # latitudinal extent
# Dataset subset is applied using subsetGrid:
dataset.subset <- subsetGrid(grid = S4_tas_iberia,
                             members = 1:3, 
                             season = NULL,
                             years = 1991:1995, 
                             lonLim = c(-5,3), 
                             latLim = c(37,43),
                             drop = FALSE)
                             
command.call <- "subsetGrid(grid = S4_tas_iberia,
                            members = 1:3, 
                            season = NULL,
                            years = 1991:1995, 
                            lonLim = c(-5,3), 
                            latLim = c(37,43),
                            drop = FALSE)"
# Just for illustration, visualization of the climatology:
require(visualizeR)
spatialPlot(climatology(dataset.subset, by.member = FALSE),
            backdrop.theme = "countries", rev.colors = TRUE)
# Encoding provenance: 
dsgraph <- metaclipR.DatasetSubset(package = "transformeR",
                                   fun = "subsetGrid",
                                   arg.list = command.call,
                                   output = "dataset.subset")
# The Graph containing the metadata has been created.
# This is a bit congested, but note that it is not conceived to be visualized in R
plot(dsgraph$graph, vertex.size = 5, edge.arrow.size=0.1)
}
}
\references{
\href{http://www.meteo.unican.es/en/climate4r}{Climate4R page at University of Cantabria}
}
\seealso{
Other subsetting: \code{\link{metaclipR.loadeR}}
}
\author{
D. San MartÃ­n, J. Bedia
}
\concept{subsetting}
