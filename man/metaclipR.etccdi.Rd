% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/metaclipR.etccdi.R
\name{metaclipR.etccdi}
\alias{metaclipR.etccdi}
\title{Directed metadata graph construction for ETCDDI climate index transformations}
\usage{
metaclipR.etccdi(graph, package = "climate4R.climdex",
  version = as.character(packageVersion(package)), output = NULL,
  index.code, fun = "climdexGrid", arg.list = NULL)
}
\arguments{
\item{graph}{Output from previous metaclipR function. A list with an i-graph class object plus the name of the parent node 
from which the climate index step hangs. \code{climdexGrid} from package \pkg{climate4R.climdex} is indicated in argument \code{fun}.}

\item{package}{package}

\item{version}{version}

\item{output}{Optional. The output R object name, as character string}

\item{index.code}{Character string, indicating the specific code of the index according to the ETCCDI definitions (see Details)}

\item{fun}{function name. Unused (set to \code{"climdexGrid"})}

\item{arg.list}{Either a character string containing a literal command call or a key-value pair list of arguments-values. See the dedicated section more for details.}
}
\description{
Build a directed metadata graph describing a ETCDDI climate index transformation on a 
climate4R grid
}
\details{
This function takes as reference the semantics defined in the Data Source and Transformation ontology
defined in the Metaclip Framework (\url{http://www.metaclip.org}).

The index codes are those presented in the TCDDI web page, giving the definition of the 27 core indices: http://etccdi.pacificclimate.org/list_27_indices.shtml

Alternatively, the function \code{climdexShow} from package \pkg{climate4R.climdex} will display on screen a
 full list of ETCCDI Core indices and their codes.
}
\section{About argument lists}{

Argument lists are key-value list in which the different arguments and their valus are passed 
to the command description. These were initially conceived as an adequate means of describing
command calls to interpreted languajes (R, python...) using both the Argument and Argument 
classes from the datasource vocabulary of METACLIP.

Alternatively, and in order to accomodate the description of the source code to other environments
and languajes (e.g. shell scripts, calls to CDOs etc.), the use of literal command calls 
seems like a more convenient choice. Literal command calls also allow for a more straightforward
reproducibility by just "copying and pasting" the code used to generate each step. Literal
command calls are encoded in METACLIP using the \emph{hadLiteralCommandCall} data property
from the datasource vocabulary, that is attached to the command description. 
To apply this second alternative, the \code{arg.list} argument is specified as a character string
containing the command call.

Note that default argument values are often omitted from comand calls. However, the default behaviour of 
commands may change depending on the specific software version, and it is therefore often advisable to 
explicitly include the default argument values for a more straightforward interpretation of the source code
by the user.
}

\examples{
\dontrun{
require(climate4R.climdex)
require(igraph)
data("tasmax.eobs")
a <- metaclipR.DatasetSubset(output = "tasmax.eobs",
                             fun = "subsetGrid",
                             arg.list = list(lonLim = c(-10,4.5),
                             latLim = c(35,44),
                             season = 1:12,
                             years = 1991:2010))

tx10p <- climdexGrid(index.code = "TX10p",
                     tx = tasmax.eobs,
                     index.arg.list = list(freq = "annual"))

arg.list <- list(index.code = "TX10p",
                 index.arg.list = list(freq = "annual"))

require(visualizeR)
spatialPlot(climatology(tx10p),
            backdrop.theme = "countries",
            main = "Mean percentage of days when TX < 10 degC (1991-2010)")
metadata <- metaclipR.etccdi(graph = a, index.code = "TX10p", arg.list = arg.list)            
plot(metadata$graph)

# Alternatively, since metaclipR 1.1.0 the literal command call can be used:
cc <- "tx10p <- climdexGrid(index.code = \\"TX10p\\", tx = tasmax.eobs, index.arg.list = list(freq = \\"annual\\"))"
metadata2 <- metaclipR.etccdi(graph = a, index.code = "TX10p", arg.list = cc)            
plot(metadata2$graph)
}
}
\seealso{
Other transformation: \code{\link{metaclip.graph.Command}},
  \code{\link{metaclipR.Aggregation}},
  \code{\link{metaclipR.AnomalyCalculation}},
  \code{\link{metaclipR.Climatology}},
  \code{\link{metaclipR.Dataset}},
  \code{\link{metaclipR.Ensemble}},
  \code{\link{metaclipR.Interpolation}}
}
\author{
D. San MartÃ­n, J. Bedia
}
\concept{transformation}
