% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/metaclipR.Validation.R
\name{metaclipR.Validation}
\alias{metaclipR.Validation}
\title{Directed metadata graph construction for validation steps}
\usage{
metaclipR.Validation(package, version, fun, measure.name = NULL,
  type = c("validation", "verification"), QualityAspect, arg.list,
  PredictionGraph, ReferenceGraph, disable.command = FALSE)
}
\arguments{
\item{package}{Validation package.}

\item{version}{A character string of the package version (e.g. as returned by \code{\link[utils]{packageVersion}})}

\item{fun}{Validation function.}

\item{measure.name}{Character string describing the name of the validation measure (e.g. \code{"Correlation"}).
If omitted, the \code{QualityAspect} value will be assigned. This will affect the name of the validation node in the 
METACLIP Interpreter graph (thus, it is recommended its usage for better provenance readability).}

\item{type}{Validation type. Current choices are \code{"validation"} and \code{"verification"}.
In essence, this argument maps the step to the general \emph{ds:Validation} class, or to the more
specific \emph{ForecastVerification} subclass, when relevant}

\item{QualityAspect}{Class name. Quality Aspect addressed by the Validation. Possible values are 
\code{"Bias"}, \code{"Accuracy"}, \code{"Association"}, \code{"Reliability"}, \code{"Discrimination"} and \code{"Resolution"}.}

\item{arg.list}{Either a character string containing a literal command call or a key-value pair list of arguments-values. See the dedicated section more for details.}

\item{PredictionGraph}{metaclipR output containing the Predictions/Projections to validate}

\item{ReferenceGraph}{metaclipR output containing the reference (observations)}

\item{disable.command}{Better not to touch. For internal usage only (used to re-use most of the code in other
functions, but skipping command tracking)}
}
\description{
Build a directed metadata graph from validation routines
}
\details{
This function takes as reference the semantics defined in the Verification ontology defined in the
}
\note{
This function supersedes the more specific \code{metaclipR.easyVerification}, deprecated since \pkg{metaclipR} v1.1.0.
Metaclip Framework (\url{http://www.metaclip.org}).
}
\section{About argument lists}{

Argument lists are key-value list in which the different arguments and their valus are passed 
to the command description. These were initially conceived as an adequate means of describing
command calls to interpreted languajes (R, python...) using both the Argument and Argument 
classes from the datasource vocabulary of METACLIP.

Alternatively, and in order to accomodate the description of the source code to other environments
and languajes (e.g. shell scripts, calls to CDOs etc.), the use of literal command calls 
is a more convenient choice. Literal command calls also allow for a more straightforward
reproducibility by just "copying and pasting" the code used to generate each step. Literal
command calls are encoded in METACLIP using the \emph{hadLiteralCommandCall} data property
from the datasource vocabulary, that is attached to the command description. 
To apply this second alternative, the \code{arg.list} argument is specified as a character string
containing the command call.

Note that default argument values are often omitted from comand calls. However, the default behaviour of 
commands may change depending on the specific software version, and it is therefore often advisable to 
explicitly include the default argument values for a more straightforward interpretation of the source code
by the user.
}

\seealso{
Other validation: \code{\link{metaclipR.easyVerification}}
}
\author{
D. San Mart√≠n, J. Bedia
}
\concept{validation}
